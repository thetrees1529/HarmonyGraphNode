
•ùtype Token @entity {
  id: ID!
  listings: [Listing!] @derivedFrom(field: "token")
  auctions: [Auction!] @derivedFrom(field: "token")
  offers: [Offer!] @derivedFrom(field: "token")
  listingCount: ListingCount @derivedFrom(field: "token")
  auctionCount: AuctionCount @derivedFrom(field: "token")
}

type ListingCount @entity {
  id: ID!
  token: Token!
  count: Int!
} 

type AuctionCount @entity {
  id: ID!
  token: Token!
  count: Int!
} 

type Auction @entity {
  id: ID!
  seller: User!
  token: Token!
  start: BigInt!
  end: BigInt!
  cancelled: Boolean!
  success: Boolean!
  startPrice: BigInt!
  bids: [Bid!] @derivedFrom(field: "on")
}

type Bid @entity {
  id: ID!
  bidder: User!
  bid: BigInt!
  on: Auction!
}

type Offer @entity {
  id: ID!
  token: Token!
  buyer: User!
  offer: BigInt
  nfts: [Nft!]
  acceptedBy: User
  removed: Boolean!
  expiresAt: BigInt!
}

type User @entity {
  id: ID!
  listings: [Listing!] @derivedFrom(field: "seller")
  auctions: [Auction!] @derivedFrom(field: "seller")
  purchases: [Listing!] @derivedFrom(field: "soldTo")
  offers: [Offer!] @derivedFrom(field: "buyer")
  bids: [Bid!] @derivedFrom(field: "bidder")
}

type OfferCount @entity {
  id: ID!
  buyer: User!
  token: Token!
  offerCount: Int!
}

type BidCount @entity {
  id: ID!
  bidder: User!
  token: Token!
  bidCount: Int!
}

type Nft @entity {
  id: ID!
  collectionAddress: Bytes!
  tokenId: BigInt!
}

type Listing @entity {
  id: ID!
  token: Token!
  seller: User!
  price: BigInt!
  expiresAt: BigInt!
  soldTo: User
  removed: Boolean!
}
ù